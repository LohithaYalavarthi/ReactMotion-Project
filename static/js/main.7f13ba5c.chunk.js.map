{"version":3,"sources":["components/RowComponent.js","serviceWorker.js","index.js"],"names":["RowComponent","_this","this","props","RowNo","react_default","a","createElement","react_motion","defaultStyle","left","style","spring","val","Object","objectSpread","position","BoxCreate","table","ColNo","i","Cols","ColLength","charAt","j","push","key","PureComponent","Boolean","window","location","hostname","match","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","SpacesRow","SpacesBox","RenderInput","bind","assertThisInitialized","name","event","console","log","setState","defineProperty","target","value","Variables","rowNo","type","placeholder","onChange","className","RowComponent_RowComponent","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f13ba5c.chunk.js","sourcesContent":["import React,{PureComponent} from 'react';\r\nimport {Motion, spring} from 'react-motion';\r\n\r\nexport default class RowComponent extends PureComponent{\r\n  render(){\r\n      if(this.props.RowNo){\r\n        return(\r\n          <Motion defaultStyle={{left: -100}} style={{left: spring(60)}}>\r\n          { val => <div style={{position: 'absolute', ...val}}>\r\n          <table >\r\n          <tbody>\r\n          {this.BoxCreate()}\r\n          </tbody>    \r\n          </table>\r\n          </div>}\r\n          </Motion>\r\n          \r\n     );\r\n      }\r\n\r\n  }\r\n \r\n  BoxCreate (){\r\n    let table = []\r\n    if(this.props.ColNo && this.props.RowNo){\r\n        for(let i=0; i< this.props.RowNo; i++){\r\n        let Cols = [] ;\r\n        let ColLength =this.props.ColNo.charAt(i);\r\n        if(ColLength){\r\n         for (let j = 0; j< ColLength; j++) { \r\n          Cols.push(<td  key={i+j}>100px Height</td>)\r\n        }\r\n      }\r\n    table.push(<tr  key={i} >{Cols}</tr>) \r\n    }\r\n    return table\r\n  }\r\n    }\r\n   \r\n  }\r\n \r\n  \r\n\r\n\r\n\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React,{PureComponent} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RowComponent from './components/RowComponent'\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends PureComponent{\n  constructor(props){\n        super(props);\n        this.state={\n          RowNo : \"\",\n          ColNo : \"\",\n          SpacesRow : \"\",\n          SpacesBox : \"\"\n        }\n    this.RenderInput = this.RenderInput.bind(this);\n  }\n  RenderInput(name,event){\n    console.log(\"name\", name);\n   this.setState({[name]: event.target.value })\n  }\n  render(){\n    let Variables= this.state;\n    console.log(\"Uparent\"+ this.state.RowNo);\n    var rowNo =this.state.RowNo;\n    var ColNo = this.state.ColNo;\n    console.log(\"RowNo\"+ rowNo ,\"ColNo\"+ ColNo);\n    return(\n      <div>\n        <input name =\"RowNo\" type=\"number\" placeholder =\"No of Row:\"\n         value= {this.state.RowNo} onChange={this.RenderInput.bind(this,\"RowNo\")}/>\n        <input type=\"number\" placeholder =\"Columns String\" value={this.state.ColNo} onChange={this.RenderInput.bind(this,\"ColNo\")} />\n        <div className=\"RowInpt\">\n        <input  type=\"number\" name=\"SpacesRow\" value={this.state.SpacesRow} placeholder =\"Space between Rows\" onChange={this.RenderInput.bind(this,\"SpacesRow\")}/>\n        <input  type=\"number\" name=\"SpacesBox\" placeholder =\"Space between boxes\" value={this.state.SpacesBox} onChange={this.RenderInput.bind(this,\"SpacesBox\")} /> \n        </div> \n        { rowNo ?\n                  <RowComponent {...Variables}/> \n              : null\n            }\n       \n      </div>\n     )\n  }\n}\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}